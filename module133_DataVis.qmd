---
title: "1.3.3: Data Visualization"
subtitle: "(Asynchronous-Online)"
bibliography: ./packages.bib
nocite: |
  @*
format:
  html: default
  pdf: default
editor_options: 
  chunk_output_type: console
---

\thispagestyle{fancy}

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      error = TRUE,
                      message = FALSE,
                      warning = FALSE)
```

## Session Objectives

1. To visualize data using different R packages.

Key points to cover:

1. Introduce to ggplot2 and other R packages.
2. Visualize one, two, or more variables at a time.
3. Introduce other resources (e.g., books, blogs, or websites) trainees can refer to.

---

## 0. Prework - Before You Begin

### A. Install packages

If you do not have them already, install the following packages from CRAN:

* [`ggplot2](https://cloud.r-project.org/web/packages/ggplot2/)
* [`ggthemes`](https://cloud.r-project.org/web/packages/ggthemes/)
* [`readr`](https://cloud.r-project.org/web/packages/readr/)
* [`dplyr]()

### B. Open/create your RStudio project

Let's start with the `myfirstRproject` RStudio project you created in [Module 1.3.2 - part 1](module132_DataWrangling.html#begin-with-a-new-rstudio-project). If you have not yet created this `myfirstRproject` RStudio project, go ahead and create a new RStudio Project for this lesson. _Feel free to name your project whatever you want, it does not need to be named `myfirstRproject`._

### C. Create a new R script and load data into your computing session

At the end of [Module 1.3.2 - part 6](module132_DataWrangling.html#save-mydata-as-.rdata-native-r-binary-format) you saved the `mydata` dataset in the `mydata.RData` R binary format.

1. Go ahead and create a new R script (`*.R`) for this computing session. _We did this already in [Module 1.3.1 - part 3](module131_IntroRRStudio.html#create-your-first-r-script) - refer to this section to remember how to create a new R script._

2. Put this code into your new R script (`*.R`) to load `mydata.RData` into your current computing session.

```{r}
# load mydata
load(file = "mydata.RData")
```

::: callout-important
## Data must/should be in your RStudio project

**REMEMBER** R/RStudio automatically looks in your current RStudio project folder for all files for your current computing session. So, make sure the `mydata.RData` file is in your current RStudio project `myfirstRproject` folder on your computer.

\medskip

For a more detailed overview of RStudio projects:

* read ["Chapter 6: R projects" in the _The Epidemiologist R Handbook_](https://epirhandbook.com/en/new_pages/r_projects.html) and 
* refer to ["Chapter 45 Directory interactions" in the _The Epidemiologist R Handbook_ ](https://epirhandbook.com/en/new_pages/directories.html).
:::

### D. Get Inspired!

* Get Inspired at [The R Graph Gallery](https://r-graph-gallery.com/)
* Also see the [Top Curated R Graphs](https://r-graph-gallery.com/best-r-chart-examples)
* Also see [Additional Resources - R Graphics](additionalResources.html#r-graphics)

---

\newpage

## 1. Base R graphical functions

The base R `graphics` package is very powerful on its own. As you saw in [1.3.1: Introduction to R and R Studio](module131_IntroRRStudio.html), we can make a simple 2-dimensional scatterplot with the `plot()` function.

### Base R - Scatterplot

For example, let's make a plot of `Height` on the X-axis (horizontal) and `WeightPRE` on the Y-axis (vertical) from the `mydata` dataset. Since we are using base R function, we have to use the `$`selector to identify the variables we want inside the `mydata` dataset.

Learn more about the `plot()` function and arguments by running `help(plot, package = "graphics")`.

```{r}
plot(x = mydata$Height,
     y = mydata$WeightPRE)
```

The plot does look a little odd - this is due to some data errors in the `mydata` dataset. We will fix these below. But for now, you can "see" that these data may have some issues that need to be addressed. For example:

* There are 2 people with heights < 5 feet tall which may be suspect
* There are 2 people with a weight < 100 pounds which may be data entry errors or incorrect units

For now, let's add some additional graphical elements:

* a better label for the x-axis
* a better label for the y-axis
* a title for the graph
* a subtitle for the graph

```{r}
plot(x = mydata$Height,
     y = mydata$WeightPRE,
     xlab = "Height (in decimal inches)",
     ylab = "Weight (in pounds) - before intervention",
     main = "Weight by Height in the Mydata Project",
     sub = "Hypothetical Madeup mydata Dataset")
```

And we could also add color and change the shapes - for example, let's color and shape the points by `GenderCoded`, the numeric coding for gender where 1=Male, 2=Female.

::: callout-note
## Plot code inspiration

I pulled this code together from code examples at:

* [Stackoverflow post on using `pch`](https://stackoverflow.com/questions/12919816/plotting-in-different-shapes-using-pch-argument)
* [STHDA post on point shapes](https://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r)
:::

```{r}
plot(x = mydata$Height,
     y = mydata$WeightPRE,
     col = c("blue", "green")[mydata$GenderCoded],
     pch = c(15, 19)[mydata$GenderCoded],
     xlab = "Height (in decimal inches)",
     ylab = "Weight (in pounds) - before intervention",
     main = "Weight by Height in the Mydata Project",
     sub = "Hypothetical Madeup mydata Dataset")
```

The [STHDA website on "R Base Graphs" ](https://www.sthda.com/english/wiki/r-base-graphs) has a nice walkthrough of using the base R `graphics` package to make really nice plots.

### Base R - Histogram

#### **Basic Histogram**

As we noted above, let's take a look at the distribution of the heights in the `mydata` dataset. There is a specific `hist()` function in the `graphics` package for making histograms, learn more by running `help(hist, package = "graphics")`.

Notice that we can use some of the same arguments as we did above for `plot()`.

```{r}
hist(mydata$Height,
     xlab = "Height (in decimal inches)",
     col = "lightblue",
     border = "black",
     main = "Histogram of Heights",
     sub = "Hypothetical Madeup mydata Dataset")
```

::: callout-tip
## Colors available

There are 657 names colors immediately available to you from the built-in `grDevices` Base R package which works in conjunction with `graphics`. You can view the names of all of these colors by running `colors()`. You can also learn more at:

* [https://www.sthda.com/english/wiki/colors-in-r#google_vignette](https://www.sthda.com/english/wiki/colors-in-r#google_vignette)
* [https://r-graph-gallery.com/42-colors-names.html](https://r-graph-gallery.com/42-colors-names.html)
* [https://r-graph-gallery.com/ggplot2-color.html](https://r-graph-gallery.com/ggplot2-color.html) - which explains how colors can be specified using the built-in color names, but cal also be specified using RGB (red, green, blue) indexes or even Hexcodes for which there are many online tools like [https://htmlcolorcodes.com/](https://htmlcolorcodes.com/).
:::

```{r}
# list built-in colors
colors()
```

#### **Histogram with Overlaid Density Curve**

Statisticians often like seeing a histogram _(for the frequencies or probability of each value for the variable in the dataset)_ with an overlaid density curve _(which is "smoothed" line for these probabilities)_. Statistical software like SAS and SPSS make this really easy. However, in R, we need to think through the process to get this to work.

* First, we need to make the histogram using probabilities for the "bars" in the histogram instead of frequency counts.
* Second, we need to add a density line curve over the histogram "bars".

See these online examples:

* [https://r-charts.com/distribution/histogram-curves/](https://r-charts.com/distribution/histogram-curves/)
* [https://www.datacamp.com/doc/r/histograms-and-density](https://www.datacamp.com/doc/r/histograms-and-density)
* [https://www.r-bloggers.com/2012/09/histogram-density-plot-combo-in-r/](https://www.r-bloggers.com/2012/09/histogram-density-plot-combo-in-r/)

```{r}
# make histogram as we did above
# add freq = FALSE
hist(mydata$Height,
     freq = FALSE,
     xlab = "Height (in decimal inches)",
     col = "lightblue",
     border = "black",
     main = "Histogram of Heights",
     sub = "Hypothetical Madeup mydata Dataset")

# add density curve line
# add na.rm=TRUE to remove 
# the missing values in Height
lines(density(mydata$Height, na.rm=TRUE),
      col = "black")
```

#### **Fix the Heights**

So as you can see in the histogram and in the scatterplot figures above for the `Height` variable, there are 2 people with heights under 4 feet tall. 

```{r}
# use dplyr::arrange()
library(dplyr)

mydata %>%
  select(SubjectID, Height) %>%
  arrange(Height) %>%
  head()
```

Let's look at these values:

* `SubjectID` number 28 has a `Height` of 2.6 feet tall
    - If this wasn't a made-up dataset, we could ask the original data collectors to see if there is a way to check this value in their records or possibly to re-measure this individual.
    - For now, let's assume this was a simple typo where the 2 numbers were transposed where this individual should be 6.2 feet tall.
* `SubjectID` number 8 has a `Height` of 3.3 feet tall
    - Unfortunately, this is probably not a simple typo. Without further details, we should maybe set this to missing as an unvalidated data point.
    - As a side-note, I actually ran into this problem in a study where one of the participants was a paraplegic. So, this could be a legitimate height. But when computing BMI, adjustments need to be made or alternative body metrics are needed.
    - For now, we will set this to missing, `NA_real_` which is missing for "real" numeric variables.

```{r}
# make a copy of the dataset
mydata_corrected <- mydata

# compute a new corrected height
# fix heights for these 2 IDs
mydata_corrected <- 
  mydata_corrected %>%
  mutate(Height_corrected = case_when(
    (SubjectID == 28) ~ 6.2,
    (SubjectID == 8) ~ NA_real_,
    .default = Height
  ))
```

Remake the histogram with the corrected heights.

```{r}
# make histogram as we did above
# add freq = FALSE
hist(mydata_corrected$Height_corrected,
     freq = FALSE,
     xlab = "Height (in decimal inches)",
     col = "lightblue",
     border = "black",
     main = "Histogram of Heights",
     sub = "Hypothetical Madeup mydata Dataset")

# add density curve line
# add na.rm=TRUE to remove 
# the missing values in Height
lines(density(mydata_corrected$Height_corrected, na.rm=TRUE),
      col = "black")
```

### Base R - Barchart

Let's make a bar chart for the frequencies for the 3 SES categories:

```{r}
# get table of frequencies for each category
tab1 <- table(mydata_corrected$SES.f)

# make plot of the frequencies for 
# each category
barplot(tab1,
        xlab = "SES Categories",
        ylab = "Frequencies",
        col = "#f7f445",
        border = "darkgreen",
        main = "Socio Economic Status Categories",
        sub = "Hypothetical Madeup mydata Dataset")
```

### Base R - Boxplot

Make side-by-side boxplots of the heights by gender.

```{r}
boxplot(Height_corrected ~ GenderCoded.f,
        data = mydata_corrected,
        xlab = "Gender",
        ylab = "Height (in decimal feet)",
        col = "#f58ef1",
        border = "darkmagenta",
        main = "Height by Gender",
        sub = "Hypothetical Madeup mydata Dataset")
```

---

\newpage

## 2. `ggplot2` package

The `ggplot2` package name starts with `gg` which stands for the "grammar of graphics" which is explained in the ["ggplot2: Elegant Graphics for Data Analysis (3e)" Book](https://ggplot2-book.org/introduction#what-is-the-grammar-of-graphics). 

::: callout-note
## Why is the package `ggplot2` and not `ggplot`? 

Many people often ask Hadley Wickham (the developer of `ggplot2`) what happened to the first `ggplot`? Technically, there was a `ggplot` package and you can still view the [`ggplot` archived package versions on CRAN](https://cran.r-project.org/src/contrib/Archive/ggplot/) which date back to 2006 with the last version posted in 2008. However, in 2007, Hadley redesigned the package and published the first version of [`ggplot2` _(version 0.5.1)_ was posted on CRAN](https://cran.r-project.org/src/contrib/Archive/ggplot2/). So, `ggplot2` is the package that has stayed in production and actively maintained for nearly 20 years!!
:::


Given that `ggplot2` has been actively maintained for nearly 20 years, it has become _almost_ the defacto graphical standard for R graphics. If you take a look at the [list of packages on CRAN that start with the letter "G"](https://cran.r-project.org/web/packages/available_packages_by_name.html#available-packages-G), as of this morning `01/28/2025 at 8:23 am EST, USA`, there are 230 packages that start with `gg` - nearly all of these are compatible packages that extend the functionality or work in concert with the `ggplot2` package. There are also currently 14 packages on the [Bioconductor repository](https://www.bioconductor.org/packages/release/BiocViews.html#___Software) that start with `gg`.

Let's make plots similar to the ones above but now using `ggplot2`. When making a `ggplot2` plot, we build the plots using layers that get added to the previous layers.

### `ggplot2` - Scatterplot

Here are the steps to building a scatterplot.

1. First, load the `ggplot2` package, designate the dataset and variables (aesthetics) to be included.

```{r}
#load ggplot2
library(ggplot2)

# create the plot space
ggplot(data = mydata_corrected,
       aes(x = WeightPRE,
           y = WeightPOST))
```

2. Next add `+` a "geometric object" or "geom" to show the data as points.

```{r}
ggplot(data = mydata_corrected,
       aes(x = WeightPRE,
           y = WeightPOST)) +
  geom_point()
```

3. We can add color by `GenderCoded.f`

```{r}
ggplot(data = mydata_corrected,
       aes(x = WeightPRE,
           y = WeightPOST,
           color = GenderCoded.f)) +
  geom_point()
```

4. We can also add labels, a title and better legend title

```{r}
ggplot(data = mydata_corrected,
       aes(x = WeightPRE,
           y = WeightPOST,
           color = GenderCoded.f)) +
  geom_point() +
  xlab("Weight (in pounds) before program") +
  ylab("Weight (in pounds) after program") +
  labs(
    title = "Weights (in pounds) before and after",
    subtitle = "Hypothetical Madeup mydata Dataset",
    color = "Gender"
  ) 
```

Notice that there are 4 weights that seem off. Also notice that the values are within a resonable range when considering PRE or POST separately, but when you put them together in a scatterplot you can see that the values are off since we expect PRE and POST weights to be somewhat similar.

* Two individuals have PRE weights that are < 100 pounds (bottom left side of plot).
    - There is a good chance that these weights may have been accidently recorded as kg (kilograms) instead of in pounds.
* And there are 2 individuals with POST weights around 100-120 lbs, but for whom their PRE weights were 225-260 lbs.
    - There is a good chance that these two data points may have had a typo in the first number (e.g. a weight of 110 should be 210).
* For this made-up dataset, it also appears that all 4 of these odd data points are Males. It is a good idea to explore other "correlates" that may help identify underlying data collection issues.

Let's correct these values.

```{r}
# for WeightPRE < 100, convert kg to lbs
mydata_corrected <- mydata_corrected %>%
  mutate(WeightPRE_corrected = case_when(
    (WeightPRE < 100) ~ WeightPRE * 2.20462,
    .default = WeightPRE
  ))
```

```{r}
# For WeightPOST, for
# SubjectID 28, change WeightPOST=98 to 198
# since this person's WeightPRE was 230.
# also fix SubjectID= 20, for
# WeightPOST from 109 to 209 since
# their WeightPRE was 260

mydata_corrected <- mydata_corrected %>%
  mutate(WeightPOST_corrected = case_when(
    (SubjectID == 28) ~ 198,
    (SubjectID == 20) ~ 209,
    .default = WeightPOST
  ))
```

Let's redo the plot with these corrected values - now the PRE and POST weights looks similar.

I've also added a "reference line" (in "red" color) to the plot below. By adding the line "Y = X" we can also visualize which points are above or below the line for people who gained or lost weight from PRE-to-POST, respectively. It looks like most people lost weight - the majority of the points are below the line where PRE > POST weights.

I also:

* applied colors to each gender category,
* applies shapes to each gender category,
* changed the size of the points,
* assigned custom colors for each gender category,
    - the colors are for the non-missing values
    - if you want to see the person missing a gender, we have to specifically assign a color for NA using `na.value=`
* assigned custom shapes for each gender category,
    - the colors are for the non-missing values
    - if you want to see the person missing a gender, we have to specifically assign a color for NA using `na.value=`
* also notice that I had to provide a custom label in the `labs()` for the shape and color legend - the labels are the same so they will be in the same legend box. _It is possible to assign the variables for color and shape to different variables._

```{r}
ggplot(data = mydata_corrected,
       aes(x = WeightPRE_corrected,
           y = WeightPOST_corrected,
           color = GenderCoded.f,
           shape = GenderCoded.f)) +
  geom_point(size = 2) +
  geom_abline(slope = 1, 
              intercept = 0,
              color = "red") +
  scale_shape_manual(values = c(16, 17),
                     na.value = 15) +
  scale_color_manual(values = c("blue", 
                                "magenta"),
                     na.value = "grey30") +
  xlab("Weight (in pounds) before program") +
  ylab("Weight (in pounds) after program") +
  labs(
    title = "Weights (in pounds) before and after",
    subtitle = "Hypothetical Madeup mydata Dataset",
    color = "Gender",
    shape = "Gender"
  ) 
```

### `ggplot2` - Histogram

Let's make a histogram of `Age` and overlay a density curve like we did above for the heights, but this time using the `ggplot2` package functions.

The first step:

* specify the dataset `mydata_corrected` and "aesthetics" variable `x=Age` inside the `ggplot()` step
* then add the geometric object `geom_histogram()`

```{r}
ggplot(data = mydata_corrected, 
       aes(x = Age)) +
  geom_histogram()
```

Let's add some color using `fill=` for the inside colors of the bars and `color=` for the border color for the bars.

```{r}
ggplot(mydata_corrected, 
       aes(x = Age)) +
  geom_histogram(fill = "lightblue",
                 color = "black")
```

To add the density curve, we need to do 2 things:

1. Add an aesthetic `aes()` to change from counts (or frequencies) for the bars to probabilities. We can do this using the `after_stat()` function.
    - Learn more by running `help(aes_eval, package = "ggplot2")`.
2. And then we can add the `geom_density()` geometric object and add `color=` for the overlaid line color.

And I also added some better labels to the axes, title and subtitle.

```{r}
ggplot(mydata_corrected, 
       aes(x = Age,
           y = after_stat(density))) +
  geom_histogram(fill = "lightblue",
                 color = "black") +
  geom_density(color = "red") +
  xlab("Age (in years)") +
  ylab("Proportion") +
  labs(
    title = "Ages for Participants",
    subtitle = "Hypothetical Madeup mydata Dataset"
  ) 
```

### `ggplot2` - Boxplot (and variations)

Let's look at the corrected PRE weights by SES.

```{r}
ggplot(data = mydata_corrected,
       aes(x = SES.f,
           y = WeightPRE_corrected)) +
  geom_boxplot()
```

There is one person missing SES. So, let's filter the dataset and remake the plot. Instead of creating another "new" dataset, we can instead using the `dplyr` pipe `%>%` into our plotting workflow asfollows to filter out the missing SES before we make the plot. Notice I can drop the `data = ` in the `ggplot()` step.

In the `filter()` step below, I used the `!` exclamation point to indicate that we want to keep all rows for which `SES.f` is NOT missing, by using `!is.na()`.

```{r}
library(dplyr)

mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  ggplot(aes(x = SES.f, 
             y = WeightPRE_corrected)) +
  geom_boxplot()
```

Let's add a fill color for the SES categories.

```{r}
mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  ggplot(aes(x = SES.f, 
             y = WeightPRE_corrected,
             fill = SES.f)) +
  geom_boxplot()
```

And add better labels.

```{r}
mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  ggplot(aes(x = SES.f, 
             y = WeightPRE_corrected,
             fill = SES.f)) +
  geom_boxplot() +
  xlab("Socio-Economic Status Categories") +
  ylab("Weight (in pounds) before program") +
  labs(
    title = "Weights by SES Categories",
    subtitle = "Hypothetical Madeup mydata Dataset"
  ) 
```

**Try Another Geom**

One of the cool things about `ggplot2` is the ability to easily swap out `geom`'s. Let's try a violin plot which provides a better idea of the shape of the underlying distributions that you don't get with a simple boxplot. Change `geom_boxplot()` to `geom_violin()`.

```{r}
mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  ggplot(aes(x = SES.f, 
             y = WeightPRE_corrected,
             fill = SES.f)) +
  geom_violin() +
  xlab("Socio-Economic Status Categories") +
  ylab("Weight (in pounds) before program") +
  labs(
    title = "Weights by SES Categories",
    subtitle = "Hypothetical Madeup mydata Dataset"
  ) 
```

### `ggplot2` - Barchart

Let's make a simple barchart for `SES.f` after filtering out the `NA`s.

```{r}
mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  ggplot(aes(x = SES.f)) +
  geom_bar()
```

Let's also make a custered barplot of `SES.f` by `GenderCoded.f`. Let's also filter out the `NA`s from `GenderCoded.f` as well.

To add the 2nd grouping or clustering variable, we add `fill=` to the aesthetics and then add `position = "dodge"` for `geom_bar()` to see the colors side by side instead of stacked.

```{r}
mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  filter(!is.na(GenderCoded.f)) %>%
  ggplot(aes(x = SES.f,
             fill = GenderCoded.f)) +
  geom_bar(position = "dodge")
```

Let's also add custom colors and better labels.

```{r}
mydata_corrected %>%
  filter(!is.na(SES.f)) %>%
  filter(!is.na(GenderCoded.f)) %>%
  ggplot(aes(x = SES.f,
             fill = GenderCoded.f)) +
  geom_bar(position = "dodge", 
           color = "black") +
  scale_fill_manual(values = c("blue", 
                               "magenta")) +
  xlab("Socio-Economic Status Categories") +
  ylab("Frequency") +
  labs(
    title = "Frequencies of SES Categories by Gender",
    subtitle = "Hypothetical Madeup mydata Dataset",
    fill = "Gender"
  )
```


### `ggplot2` - Errorbar plots



### lollipop plot? - pre-post changes


---

\newpage

## 3. Other Graphics Packages to Know

ggarrange

patchwork

gmodels

vim

vcd

ggally

gganimate

UpSet plots



---

\newpage

## 4. Other Places to Get Help and Get Started

### R Gallery


### R Graphics Cookbook






---

\newpage

```{r echo=FALSE}
knitr::write_bib(x = c(.packages()), 
                 file = "packages.bib")
```

## References

::: {#refs}
:::

## Other Helpful Resources

[**Other Helpful Resources**](./additionalResources.html)

